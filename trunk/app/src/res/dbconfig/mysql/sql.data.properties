## Code conventions for SQL: write reserved words in upper case, write table and field names in lower case.

#
# Queries for retrieving all the objects
#

# fields order for the forum_group table: id(int), name(String), sort_order(int)
get.objects.forum.group=SELECT id, name, sort_order FROM forum_group
# fields order for the forum table: id(int), forum group(int), rated(int), in_top(int), rate_limit(int), subscribed(boolean), short_name(String), name(String)
get.objects.forum=SELECT id, forum_group_id, rated, in_top, rate_limit, subscribed, short_name, name FROM forum
# fields order for the new_rating table: id(int), message_id(int), rate(int)
get.objects.new.rating=SELECT id, message_id, rate FROM new_rating
# fields order for the message table: id (int), topic id (int), parent id (int), forum id (int), user id (int), subject (String), user nick (String), message date (long), update date (long), read (boolean), rating (String),
get.objects.message.data=SELECT \
    id, topic_id, parent_id, forum_id, user_id, subject, user_nick, message_date, update_date, `read`, rating, \
    (SELECT topic_id FROM ignored_topic it WHERE it.topic_id = m.topic_id LIMIT 1) IS NOT NULL AS ignored, \
    (SELECT mp.user_id FROM message mp WHERE mp.id = m.parent_id) as parent_user_id, \
    (SELECT user_id FROM ignored_user iu WHERE iu.user_id = m.user_id LIMIT 1) IS NOT NULL as ignoredUser \
  FROM \
    message m \
  WHERE \
    topic_id = ? AND forum_id = ?
# fields order for the message table: id (int), topic id (int), parent id (int), forum id (int), user id (int), subject (String), user nick (String), message date (long), update date (long), read (boolean), rating (String)
get.topic.message.data.by.forum.id=SELECT \
    id, m.topic_id, parent_id, forum_id, user_id, subject, user_nick, message_date, update_date, `read`, rating, \
    (SELECT topic_id FROM ignored_topic it WHERE it.topic_id = m.id LIMIT 1) IS NOT NULL AS ignored, \
    0 as parent_user_id, \
    (SELECT user_id FROM ignored_user iu WHERE iu.user_id = m.user_id LIMIT 1) IS NOT NULL as ignoredUser \
  FROM \
    message m \
  WHERE \
    forum_id = ? AND parent_id = 0
# fields order for the message table: id (int), topic id (int), parent id (int), forum id (int), user id (int), subject (String), user nick (String), message date (long), update date (long), read (boolean), rating (String)
get.ignored.topic.message.data=SELECT \
    id, m.topic_id, parent_id, forum_id, user_id, subject, user_nick, message_date, update_date, `read`, rating, \
    true as ignored, \
    0 as parent_user_id,\
    false as ignoredUser \
  FROM \
    message m JOIN ignored_topic it ON (m.id = it.topic_id)
# fields order for the new_message table: id (int), parent_id(int), forum_id(int), subject(String), message(String), draft(bool)
get.objects.new.message=SELECT id, parent_id, forum_id, subject, message, draft FROM new_message
# fields order for the new_message table: id (int), parent_id(int), forum_id(int), subject(String), message(String), draft(bool)
get.objects.new.message.to.send=SELECT id, parent_id, forum_id, subject, message, draft FROM new_message WHERE draft = 0
# fields order for the new_moderate table: id (int), message_id (int), action (int), forumId(int), description(String), as_moderator(boolean)
get.objects.new.moderates=SELECT id, message_id, action, forum_id, description, as_moderator FROM new_moderate
# fields order for the favorites table: id (int), `type`(string), config(string)
get.objects.favorite=SELECT id, `type`, config FROM favorite

#
# Queries for retrieving the object by its id
#

# fields order for the `version` table: `type`(int), `version`(byte[64])
get.object.version=SELECT `type`, `version` FROM `version` WHERE `type`=?
# fields order for the forum_group table: id(int), name(String), sort_order(int)
get.object.forum.group=SELECT id, name, sort_order FROM forum_group WHERE id=?
# fields order for the forum table: id(int), forum group(int), rated(int), in_top(int), rate_limit(int), subscribed(boolean), short_name(String), name(String)
get.object.forum=SELECT id, forum_group_id, rated, in_top, rate_limit, subscribed, short_name, name FROM forum WHERE id=?
# fields order for the message table: id (int), topic id (int), parent id (int), forum id (int), user id (int), subject (String), user nick (String), message date (long), update date (long), read (boolean), rating (String)
get.object.message.data=SELECT \
  id, topic_id, parent_id, forum_id, user_id, subject, user_nick, message_date, update_date, `read`, rating,\
  (SELECT topic_id FROM ignored_topic it WHERE it.topic_id = m.topic_id OR it.topic_id = m.id LIMIT 1) IS NOT NULL AS ignored, \
  (SELECT mp.user_id FROM message mp WHERE mp.id = m.parent_id) as parent_user_id, \
  (SELECT user_id FROM ignored_user iu WHERE iu.user_id = m.user_id LIMIT 1) IS NOT NULL as ignoredUser \
FROM \
  message m \
WHERE id = ?
# fields order for the new_message table: id (int), parent_id(int), forum_id(int), subject(String), message(String), draft(bool)
get.object.new.message=SELECT id, parent_id, forum_id, subject, message, draft FROM new_message WHERE id=?
# fields order for the new_moderate table: id (int), message_id (int), action (int), forumId(int), description(String), as_moderator(boolean)
get.object.new.moderate=SELECT id, message_id, action, forum_id, description, as_moderator FROM new_moderate WHERE id=?
# fields order for the user table: id (int), name (String), nick (String), real_name (String), email (String), home_page (String), specialization (String), where_from (String), origin (String)
get.object.user=SELECT id, name, nick, real_name, email, home_page, specialization, where_from, origin FROM user WHERE id=?
# fields order for the favorites table: id (int), `type`(string), config(string)
get.object.favorite=SELECT id, `type`, config FROM favorite WHERE id=?

#
# Queries for getting part(s) of object by object id
#
# fields order for the message table: message (String)
get.object.message.body=SELECT message FROM message WHERE id=?
get.objects.new.rating.mark.by.message.id=SELECT rate FROM new_rating WHERE message_id=?
get.objects.mark.stat.by.message.id=SELECT rate, count(user_id) FROM rating WHERE message_id = ? GROUP BY rate

#
# Queries for getting next value for object primary key
#
get.next.id.new.rating=SELECT (IFNULL(MAX(id), 0) + 1) FROM new_rating
get.next.id.new.message=SELECT (IFNULL(MAX(id), 0) + 1) FROM new_message
get.next.id.favorite=SELECT (IFNULL(MAX(id), 0) + 1) FROM favorite

#
# Queries for getting the objects by its properties
#
# fields order for the rating table: message_id(int), topic_id(int), user_id(int), user_rating(int), rate(int), rate_date(long)
get.objects.rating.by.message.id=SELECT message_id, topic_id, user_id, user_rating, rate, rate_date FROM rating WHERE message_id=?
# fields order for the moderate table: message_id(int), user_id(int), forum_id(int), creation_time(long)
get.objects.moderate.by.message.id=SELECT message_id, user_id, forum_id, creation_time FROM moderate WHERE message_id=?
# fields order for the new_rating table: id(int), message_id(int), rate(int)
get.objects.new.rating.by.message.id=SELECT id, message_id, rate FROM new_rating WHERE message_id=?
# fields order for the message table: id (int), topic id (int), parent id (int), forum id (int), user id (int), subject (String), user nick (String), message date (long), update date (long), read (boolean), rating (String)
get.objects.message.data.user.replies=SELECT \
  m1.id, m1.topic_id, m1.parent_id, m1.forum_id, m1.user_id, m1.subject, m1.user_nick, m1.message_date, m1.update_date, m1.`read`, m1.rating, \
  (SELECT topic_id FROM ignored_topic it WHERE it.topic_id = m1.topic_id OR it.topic_id = m1.id LIMIT 1) IS NOT NULL AS ignored, \
  m2.user_id as parent_user_id, \
  (SELECT user_id FROM ignored_user iu WHERE iu.user_id = m1.user_id LIMIT 1) IS NOT NULL as ignoredUser \
FROM \
  message m1, message m2 \
WHERE \
  m1.parent_id=m2.id AND \
  m1.user_id <> m2.user_id AND \
  m2.user_id = ? AND \
  m1.forum_id <> 0 AND \
  m2.forum_id <> 0
# fields order for the message table: id (int), topic id (int), parent id (int), forum id (int), user id (int), subject (String), user nick (String), message date (long), update date (long), read (boolean), rating (String)
get.objects.message.data.user.posts=SELECT \
  id, topic_id, parent_id, forum_id, user_id, subject, user_nick, message_date, update_date, `read`, rating, \
  (SELECT topic_id FROM ignored_topic it WHERE it.topic_id = m.topic_id OR it.topic_id = m.id LIMIT 1) IS NOT NULL AS ignored, \
  (SELECT mp.user_id FROM message mp WHERE mp.id = m.parent_id) as parent_user_id, \
  (SELECT user_id FROM ignored_user iu WHERE iu.user_id = m.user_id LIMIT 1) IS NOT NULL as ignoredUser \
FROM \
  message m \
WHERE \
  user_id = ? AND forum_id <> 0

#
# Storing queries
#

# fields order for the `version` table: `type`(int), `version`(byte[64])
store.object.version=INSERT INTO `version`(`type`, `version`) VALUES (?, ?)
# fields order for the forum_group table: id(int), name(String), sort_order(int)
store.object.forum.group=INSERT INTO forum_group(id, name, sort_order) VALUES (?, ?, ?)
# fields order for the forum table: id(int), forum group(int), rated(int), in_top(int), rate_limit(int), subscribed(boolean), short_name(String), name(String)
store.object.forum=INSERT INTO forum(id, forum_group_id, rated, in_top, rate_limit, subscribed, short_name, name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
# fields order for the new_rating table: id(int), message_id(int), rate(int)
store.object.new.rating=INSERT INTO new_rating(id, message_id, rate) VALUES (?, ?, ?)
# fields order for the message table: id (int), topic_id (int), parent_id (int), user_id (int), forum_id (int), article_id (int), user_title_color (int), user_role (int), message_date (long), update_date (long), moderated_date (long), subject (String), message name (String), user nick (String), user title (String), message (String)
store.object.message=INSERT INTO message(id, topic_id, parent_id, user_id, forum_id, article_id, user_title_color, user_role, message_date, update_date, moderated_date, subject, message_name, user_nick, user_title, message, `read`, rating) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, '')
# fields order for the moderate table: message_id(int), user_id(int), forum_id(int), creation_time(long)
store.object.moderate=REPLACE INTO moderate(message_id, user_id, forum_id, creation_time) VALUES (?, ?, ?, ?)
# fields order for the new_message table: id(int), parent_id(int), forum_id(int), subject(String), message(String), draft(bool)
store.object.new.message=INSERT INTO new_message(id, parent_id, forum_id, subject, message, draft) VALUES (?, ?, ?, ?, ?, ?)
# fields order for the new moderate table: id (int), message_id (int), action (int), forumId(int), description(String), as_moderator(boolean)
store.object.new.moderate=INSERT INTO new_moderate(id, message_id, action, forum_id, description, as_moderator) VALUES (?, ?, ?, ?, ?, ?)
# fields order for the user table: id (int), name (String), nick (String), real_name (String), email (String), home_page (String), specialization (String), where_from (String), origin (String)
store.object.user=INSERT INTO user(id, name, nick, real_name, email, home_page, specialization, where_from, origin) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
# fields order for the rating table: message_id(int), topic_id(int), user_id(int), user_rating(int), rate(int), rate_date(long)
store.object.rating=REPLACE INTO rating(message_id, topic_id, user_id, user_rating, rate, rate_date) VALUES (?, ?, ?, ?, ?, ?)
# field: message_id
store.object.extra.message=INSERT INTO extra_message(message_id) VALUES (?)
# fields order for the favorites table: id(int), name(string), `type`(string), config(string)
store.object.favorite=INSERT INTO favorite(id, `type`, config) VALUES(?,?,?)

#
# Queries to remove object or objects.
#
remove.object.forum.group=DELETE FROM forum_group WHERE id=?
remove.object.user=DELETE FROM user WHERE id=?
remove.object.new.rating=DELETE FROM new_rating WHERE id=?
remove.object.new.message=DELETE FROM new_message WHERE id=?
remove.objects.new.message=TRUNCATE new_message
remove.object.new.moderate=DELETE FROM new_moderate WHERE id=?
remove.object.extra.message=DELETE FROM extra_message WHERE message_id=?
remove.object.favorite=DELETE FROM favorite WHERE id=?

remove.objects.moderate=DELETE FROM moderate WHERE message_id=?

remove.all.objects.extra.message=DELETE FROM extra_message
remove.all.objects.new.rating=DELETE FROM new_rating

#
# Queries for getting all the ids of the objects
#
get.ids.forum.group=SELECT id FROM forum_group
get.ids.extra.message=SELECT message_id FROM extra_message
get.ids.forum.subscribed=SELECT id FROM forum WHERE subscribed=true


#
# Updating queries
#
update.object.version=UPDATE `version` SET `version`=? WHERE `type`=?
# fields order for the message table: topic_id (int), parent_id (int), user_id (int), forum_id (int), article_id (int), user_title_color (int), user_role (int), notify_on_response (boolean), `read` (boolean), category (int), message_date (long), update_date (long), moderated_date (long), subject (String), message name (String), user nick (String), user title (String), message (String), id (int)
update.object.message=UPDATE message SET topic_id=?, parent_id=?, user_id=?, forum_id=?, article_id=?, user_title_color=?, user_role=?, message_date=?, update_date=?, moderated_date=?, subject=?, message_name=?, user_nick=?, user_title=?, message=?, `read`=? WHERE id=?
# fields order for the forum_group table: name(String), sort_order(int), id(int)
update.object.forum.group=UPDATE forum_group SET name=?, sort_order=? WHERE id=?
# fields order for the forum table: forum group(int), rated(int), in_top(int), rate_limit(int), short_name(String), name(String), id(int)
update.object.forum=UPDATE forum SET forum_group_id=?, rated=?, in_top=?, rate_limit=?, short_name=?, name=? WHERE id=?
# fields order for the forum table: subscribed(bool), id(int)
update.object.forum.subscribe=UPDATE forum SET subscribed=? WHERE id=?
# fields order for the new_message table: subject(String), message(String), draft(bool), id(int)
update.object.new.message=UPDATE new_message SET subject=?, message=?, draft=? WHERE id=?
# fields order for the new_message table: draft(bool), id(int)
update.object.new.message.draft.flag=UPDATE new_message SET draft=? WHERE id=?
# fields order for the user table: name (String), nick (String), real_name (String), email (String), home_page (String), specialization (String), where_from (String), origin (String), id (int)
update.object.user=UPDATE user SET name=?, nick=?, real_name=?, email=?, home_page=?, specialization=?, where_from=?, origin=? WHERE id=?
# Updates a `read` flag for message
update.message.read.flag=UPDATE message SET `read`=? WHERE id=?
# Updates a `read` flag for all the messages of a thread
update.thread.read.flag=UPDATE message SET `read`=? WHERE topic_id=?
# Updates a `read` flag for all the messages in a forum
update.forum.messages.read.flag=UPDATE message SET `read`=? WHERE forum_id=?
# Updates ratings cache for message
update.message.rating.cache=UPDATE message SET rating=? WHERE id=?

#### Extend message mark related
# `read`(boolean), dateline(long)
update.messages.read.flag.before=UPDATE message SET `read`=? WHERE message_date <= ?
# `read`(boolean), dateline(long)
update.messages.read.flag.after=UPDATE message SET `read`=? WHERE message_date >= ?
# `read`(boolean), dateline(long), forum_id(int)
update.forum.messages.read.flag.before=UPDATE message SET `read`=? WHERE message_date <= ? AND forum_id=?
# `read`(boolean), dateline(long), forum_id(int)
update.forum.messages.read.flag.after=UPDATE message SET `read`=? WHERE message_date >= ? AND forum_id=?
# `read`(boolean), dateline(long), forum_id(int), topic_id(int), topic_id(int)
update.topic.messages.read.flag.before=UPDATE message SET `read`=? WHERE message_date <= ? AND forum_id=? AND (topic_id=? OR id=?)
# `read`(boolean), dateline(long), forum_id(int), topic_id(int), topic_id(int)
update.topic.messages.read.flag.after=UPDATE message SET `read`=? WHERE message_date >= ? AND forum_id=? AND (topic_id=? OR id=?)

#### Extend message mark related
# `read`(boolean), dateline(long)
get.messages.read.flag.before=SELECT id, topic_id, forum_id FROM message WHERE `read` <> ? AND message_date <= ?
# `read`(boolean), dateline(long)
get.messages.read.flag.after=SELECT id, topic_id, forum_id FROM message WHERE `read` <> ? AND message_date >= ?
# `read`(boolean), dateline(long), forum_id(int)
get.forum.messages.read.flag.before=SELECT id, topic_id, forum_id FROM message WHERE `read` <> ? AND message_date <= ? AND forum_id=?
# `read`(boolean), dateline(long), forum_id(int)
get.forum.messages.read.flag.after=SELECT id, topic_id, forum_id FROM message WHERE `read` <> ? AND message_date >= ? AND forum_id=?
# `read`(boolean), dateline(long), forum_id(int), topic_id(int), topic_id(int)
get.topic.messages.read.flag.before=SELECT id, topic_id, forum_id FROM message WHERE `read` <> ? AND message_date <= ? AND forum_id=? AND (topic_id=? OR id=?)
# `read`(boolean), dateline(long), forum_id(int), topic_id(int), topic_id(int)
get.topic.messages.read.flag.after=SELECT id, topic_id, forum_id FROM message WHERE `read` <> ? AND message_date >= ? AND forum_id=? AND (topic_id=? OR id=?)


#
# Utility queries
#
get.broken.topic.ids=SELECT DISTINCT \
 topic_id \
FROM \
 message \
WHERE \
 topic_id > 0 AND \
 topic_id NOT IN (SELECT id FROM message WHERE topic_id = 0)


get.unread.messages.number=SELECT count(id) FROM message WHERE `read` = FALSE AND forum_id <> 0
get.messages.number=SELECT count(id) FROM message WHERE forum_id <> 0

get.messages.number.in.forum=SELECT count(id) FROM message WHERE forum_id=?
get.unread.messages.number.in.forum=SELECT count(id) FROM message WHERE forum_id=? AND `read` = FALSE
get.unread.replies.number.in.forum=SELECT \
  count(m1.id) \
FROM \
  message m1, message m2 \
WHERE \
  m1.parent_id=m2.id AND \
  m1.`read` = false AND \
  m2.user_id <> m1.user_id AND \
  m1.forum_id = ? AND \
  m2.user_id = ? AND \
  m2.forum_id = m1.forum_id

# Inputs: own user id, thread_id
# Returns: total messages, unread messages, unread replies
get.messages.statistic.in.thread=SELECT \
  count(m1.id), \
  sum(IF((m1.read = FALSE), 1, 0)), \
  sum(IF((m2.read = FALSE AND m2.user_id <> m1.user_id AND m2.user_id = ?), 1, 0))\
FROM \
  message m1, message m2 \
WHERE \
  m1.parent_id = m2.id AND \
  m1.topic_id = ? AND \
  m2.topic_id = m1.topic_id AND \
  m2.forum_id = m1.forum_id AND \
  m1.forum_id <> 0

get.messages.number.in.thread=SELECT count(id) FROM message WHERE topic_id=? AND forum_id <> 0
get.unread.messages.number.in.thread=SELECT count(id) FROM message WHERE topic_id=? AND `read` = FALSE AND forum_id <> 0
get.unread.replies.number.in.thread=SELECT \
  count(m1.id) \
FROM \
  message m1, message m2 \
WHERE \
  m1.parent_id=m2.id AND \
  m1.read = false AND \
  m2.user_id <> m1.user_id AND \
  m1.topic_id = ? AND \
  m2.user_id = ? AND \
  m2.forum_id = m1.forum_id

get.unread.user.replies.number=SELECT \
  count(m1.id) \
FROM \
  message m1, message m2 \
WHERE \
  m1.parent_id=m2.id AND \
  m1.`read` = false AND \
  m2.user_id <> m1.user_id AND \
  m2.user_id = ? AND \
  m1.forum_id <> 0 AND \
  m2.forum_id <> 0
get.user.replies.number=SELECT \
  count(m1.id) \
FROM \
  message m1, message m2 \
WHERE \
  m1.parent_id=m2.id AND \
  m1.user_id <> m2.user_id AND \
  m2.user_id = ? AND \
  m1.forum_id <> 0 AND \
  m2.forum_id <> 0

get.unread.user.posts.number=SELECT count(id) FROM message WHERE `read` = false AND user_id = ? AND forum_id <> 0
get.user.posts.number=SELECT count(id) FROM message WHERE user_id = ? AND forum_id <> 0

get.thread.stat.data=SELECT max(message_date), count(id) FROM message WHERE topic_id = ? AND forum_id <> 0
get.last.message.date.in.forum=SELECT max(message_date) FROM message WHERE forum_id=?

is.message.exists=SELECT COUNT(id)>0 FROM message WHERE id=?
is.user.exists=SELECT COUNT(id)>0 FROM user WHERE id=?

# fields order for the message table: id (int)
get.latest.topic.list=SELECT \
    m.lastpost_id \
  FROM \
    message m LEFT JOIN ignored_topic it ON (it.topic_id = m.id) \
  WHERE \
    m.topic_id = 0 AND m.forum_id <> 0 AND it.topic_id IS NULL \
  ORDER BY \
    m.lastpost_date DESC \
  LIMIT ?

# fields order for the ignored topics table: topic_id (int)
store.object.ignored.user=REPLACE INTO ignored_user(user_id) VALUES (?)
# parameters are: topic_id (int)
remove.object.ignored.user=DELETE FROM ignored_user WHERE user_id = ?

# fields order for the ignored topics table: topic_id (int)
store.object.ignored.topic=REPLACE INTO ignored_topic(topic_id) VALUES (?)
# parameters are: topic_id (int)
remove.object.ignored.topic=DELETE FROM ignored_topic WHERE topic_id = ?
get.ignored.topic.count=SELECT count(*) FROM ignored_topic

update.topic.messages.set.lastpost.id=UPDATE message m, \
                                         (SELECT max(mm.id) as lpi, mm.topic_id FROM message mm WHERE mm.forum_id <> 0 GROUP BY mm.topic_id) lt \
                                     SET \
                                         m.lastpost_id = lt.lpi \
                                     WHERE \
                                         m.id = ? AND \
                                         m.id = lt.topic_id


update.topic.messages.set.lastpost.date=UPDATE message m, \
                                           message md \
                                       SET \
                                           m.lastpost_date = md.message_date  \
                                       WHERE \
                                           m.id = ? AND \
                                           m.lastpost_id = md.id
